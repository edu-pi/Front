const testResponseBody = [
  {
    id: 2,
    depth: 1,
    expr: "0",
    code: "a = 0",
    type: "variable",
  },
  {
    variables: [
      {
        id: 2,
        expr: "0",
        name: "a",
        code: "a = 0",
        type: "variable",
      },
    ],
    callStackName: "main",
    type: "assign",
  },
  {
    variables: [
      {
        id: 3,
        expr: "assign()",
        name: "assign",
        code: "def assign():",
        type: "function",
      },
    ],
    callStackName: "main",
    type: "assign",
  },
  {
    id: 8,
    assignName: "",
    depth: 1,
    signature: "assign()",
    code: "assign()",
    type: "callUserFunc",
  },
  {
    args: [],
    callStackName: "assign",
    code: "assign()",
    type: "createCallStack",
  },
  {
    id: 4,
    depth: 2,
    expr: "0",
    code: "a = 0",
    type: "variable",
  },
  {
    variables: [
      {
        id: 4,
        expr: "0",
        name: "a",
        code: "a = 0",
        type: "variable",
      },
    ],
    callStackName: "assign",
    type: "assign",
  },
  {
    id: 5,
    expr: "a < 3",
    depth: 2,
    code: "while a < 3:",
    orelse: false,
    type: "whileDefine",
  },
  {
    id: 5,
    depth: 2,
    expr: "a < 3",
    code: "while a < 3:",
    type: "whileChangeCondition",
  },
  {
    id: 5,
    depth: 2,
    expr: "0 < 3",
    code: "while a < 3:",
    type: "whileChangeCondition",
  },
  {
    id: 5,
    depth: 2,
    expr: "True",
    code: "while a < 3:",
    type: "whileChangeCondition",
  },
  {
    id: 6,
    depth: 3,
    expr: "a + 1",
    code: "a = a + 1",
    type: "variable",
  },
  {
    id: 6,
    depth: 3,
    expr: "0 + 1",
    code: "a = a + 1",
    type: "variable",
  },
  {
    id: 6,
    depth: 3,
    expr: "1",
    code: "a = a + 1",
    type: "variable",
  },
  {
    variables: [
      {
        id: 6,
        expr: "1",
        name: "a",
        code: "a = a + 1",
        type: "variable",
      },
    ],
    callStackName: "assign",
    type: "assign",
  },
  {
    id: 7,
    depth: 3,
    expr: "a",
    highlights: [0],
    console: null,
    code: "print(a)",
    type: "print",
  },
  {
    id: 7,
    depth: 3,
    expr: "1",
    highlights: [0],
    console: "1\n",
    code: "print(a)",
    type: "print",
  },
  {
    id: 5,
    expr: "a < 3",
    depth: 2,
    code: "while a < 3:",
    orelse: false,
    type: "whileDefine",
  },
  {
    id: 5,
    depth: 2,
    expr: "a < 3",
    code: "while a < 3:",
    type: "whileChangeCondition",
  },
  {
    id: 5,
    depth: 2,
    expr: "1 < 3",
    code: "while a < 3:",
    type: "whileChangeCondition",
  },
  {
    id: 5,
    depth: 2,
    expr: "True",
    code: "while a < 3:",
    type: "whileChangeCondition",
  },
  {
    id: 6,
    depth: 3,
    expr: "a + 1",
    code: "a = a + 1",
    type: "variable",
  },
  {
    id: 6,
    depth: 3,
    expr: "1 + 1",
    code: "a = a + 1",
    type: "variable",
  },
  {
    id: 6,
    depth: 3,
    expr: "2",
    code: "a = a + 1",
    type: "variable",
  },
  {
    variables: [
      {
        id: 6,
        expr: "2",
        name: "a",
        code: "a = a + 1",
        type: "variable",
      },
    ],
    callStackName: "assign",
    type: "assign",
  },
  {
    id: 7,
    depth: 3,
    expr: "a",
    highlights: [0],
    console: null,
    code: "print(a)",
    type: "print",
  },
  {
    id: 7,
    depth: 3,
    expr: "2",
    highlights: [0],
    console: "2\n",
    code: "print(a)",
    type: "print",
  },
  {
    id: 5,
    expr: "a < 3",
    depth: 2,
    code: "while a < 3:",
    orelse: false,
    type: "whileDefine",
  },
  {
    id: 5,
    depth: 2,
    expr: "a < 3",
    code: "while a < 3:",
    type: "whileChangeCondition",
  },
  {
    id: 5,
    depth: 2,
    expr: "2 < 3",
    code: "while a < 3:",
    type: "whileChangeCondition",
  },
  {
    id: 5,
    depth: 2,
    expr: "True",
    code: "while a < 3:",
    type: "whileChangeCondition",
  },
  {
    id: 6,
    depth: 3,
    expr: "a + 1",
    code: "a = a + 1",
    type: "variable",
  },
  {
    id: 6,
    depth: 3,
    expr: "2 + 1",
    code: "a = a + 1",
    type: "variable",
  },
  {
    id: 6,
    depth: 3,
    expr: "3",
    code: "a = a + 1",
    type: "variable",
  },
  {
    variables: [
      {
        id: 6,
        expr: "3",
        name: "a",
        code: "a = a + 1",
        type: "variable",
      },
    ],
    callStackName: "assign",
    type: "assign",
  },
  {
    id: 7,
    depth: 3,
    expr: "a",
    highlights: [0],
    console: null,
    code: "print(a)",
    type: "print",
  },
  {
    id: 7,
    depth: 3,
    expr: "3",
    highlights: [0],
    console: "3\n",
    code: "print(a)",
    type: "print",
  },
  {
    id: 5,
    expr: "a < 3",
    depth: 2,
    code: "while a < 3:",
    orelse: false,
    type: "whileDefine",
  },
  {
    id: 5,
    depth: 2,
    expr: "a < 3",
    code: "while a < 3:",
    type: "whileChangeCondition",
  },
  {
    id: 5,
    depth: 2,
    expr: "3 < 3",
    code: "while a < 3:",
    type: "whileChangeCondition",
  },
  {
    id: 5,
    depth: 2,
    expr: "False",
    code: "while a < 3:",
    type: "whileChangeCondition",
  },
  {
    id: 8,
    depth: 1,
    returnExpr: "",
    returnArgName: "",
    code: "assign()",
    delFuncName: "assign",
    delFuncId: 3,
    type: "endUserFunc",
  },
  {
    id: 9,
    depth: 1,
    expr: "a",
    highlights: [0],
    console: null,
    code: "print(a)",
    type: "print",
  },
  {
    id: 9,
    depth: 1,
    expr: "0",
    highlights: [0],
    console: "0\n",
    code: "print(a)",
    type: "print",
  },
];

export default testResponseBody;
