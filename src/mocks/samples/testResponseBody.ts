const testResponseBody = [
  {
    variables: [
      {
        id: 2,
        expr: "get_even_numbers(numbers)",
        name: "get_even_numbers",
        code: "def get_even_numbers(numbers):",
        type: "function",
        idx: null,
      },
    ],
    callStackName: "main",
    type: "assign",
  },
  {
    id: 12,
    depth: 1,
    expr: "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
    code: "numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
    type: "list",
  },
  {
    variables: [
      {
        id: 12,
        expr: "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        name: "numbers",
        code: "numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        type: "list",
        idx: {
          start: 0,
          end: 9,
        },
      },
    ],
    callStackName: "main",
    type: "assign",
  },
  {
    id: 13,
    assignName: "even_numbers",
    depth: 1,
    signature: "get_even_numbers(numbers)",
    code: "even_numbers = get_even_numbers(numbers)",
    type: "callUserFunc",
  },
  {
    args: [
      {
        expr: "[1, 2, 3, 4, 5, 6, 7, 8, 9, 10]",
        name: "numbers",
        type: "list",
      },
    ],
    callStackName: "get_even_numbers",
    code: "even_numbers = get_even_numbers(numbers)",
    type: "createCallStack",
  },
  {
    id: 3,
    depth: 2,
    expr: "[]",
    code: "even_numbers = []",
    type: "list",
  },
  {
    variables: [
      {
        id: 3,
        expr: "[]",
        name: "even_numbers",
        code: "even_numbers = []",
        type: "list",
        idx: {
          start: 0,
          end: -1,
        },
      },
    ],
    callStackName: "get_even_numbers",
    type: "assign",
  },
  {
    id: 5,
    depth: 2,
    condition: {
      target: "num",
      cur: "1",
      start: "1",
      end: "10",
      step: "1",
    },
    highlights: ["target", "cur", "start", "end", "step"],
    code: "for num in numbers:",
    type: "for",
  },
  {
    depth: 3,
    conditions: [
      {
        id: 6,
        expr: "num % 2 == 0",
        type: "if",
        code: "if num % 2 == 0:",
      },
    ],
    code: "if num % 2 == 0:",
    type: "ifElseDefine",
  },
  {
    id: 6,
    depth: 3,
    expr: "num % 2 == 0",
    code: "if num % 2 == 0:",
    type: "ifElseChange",
  },
  {
    id: 6,
    depth: 3,
    expr: "1 % 2 == 0",
    code: "if num % 2 == 0:",
    type: "ifElseChange",
  },
  {
    id: 6,
    depth: 3,
    expr: "1 == 0",
    code: "if num % 2 == 0:",
    type: "ifElseChange",
  },
  {
    id: 6,
    depth: 3,
    expr: "False",
    code: "if num % 2 == 0:",
    type: "ifElseChange",
  },
  {
    id: 5,
    depth: 2,
    condition: {
      target: "num",
      cur: "2",
      start: "1",
      end: "10",
      step: "1",
    },
    highlights: ["cur"],
    code: "for num in numbers:",
    type: "for",
  },
  {
    depth: 3,
    conditions: [
      {
        id: 6,
        expr: "num % 2 == 0",
        type: "if",
        code: "if num % 2 == 0:",
      },
    ],
    code: "if num % 2 == 0:",
    type: "ifElseDefine",
  },
  {
    id: 6,
    depth: 3,
    expr: "num % 2 == 0",
    code: "if num % 2 == 0:",
    type: "ifElseChange",
  },
  {
    id: 6,
    depth: 3,
    expr: "2 % 2 == 0",
    code: "if num % 2 == 0:",
    type: "ifElseChange",
  },
  {
    id: 6,
    depth: 3,
    expr: "0 == 0",
    code: "if num % 2 == 0:",
    type: "ifElseChange",
  },
  {
    id: 6,
    depth: 3,
    expr: "True",
    code: "if num % 2 == 0:",
    type: "ifElseChange",
  },
  {
    id: 7,
    depth: 4,
    expr: "num",
    code: "even_numbers.append(num);",
    type: "variable",
  },
  {
    id: 7,
    depth: 4,
    expr: "2",
    code: "even_numbers.append(num);",
    type: "variable",
  },
  {
    variable: {
      id: 7,
      expr: "2",
      name: "even_numbers",
      code: "even_numbers.append(num);",
      type: "variable",
      idx: null,
    },
    type: "append",
    callStackName: "get_even_numbers",
  },
  {
    id: 5,
    depth: 2,
    condition: {
      target: "num",
      cur: "3",
      start: "1",
      end: "10",
      step: "1",
    },
    highlights: ["cur"],
    code: "for num in numbers:",
    type: "for",
  },
  {
    depth: 3,
    conditions: [
      {
        id: 6,
        expr: "num % 2 == 0",
        type: "if",
        code: "if num % 2 == 0:",
      },
    ],
    code: "if num % 2 == 0:",
    type: "ifElseDefine",
  },
  {
    id: 6,
    depth: 3,
    expr: "num % 2 == 0",
    code: "if num % 2 == 0:",
    type: "ifElseChange",
  },
  {
    id: 6,
    depth: 3,
    expr: "3 % 2 == 0",
    code: "if num % 2 == 0:",
    type: "ifElseChange",
  },
  {
    id: 6,
    depth: 3,
    expr: "1 == 0",
    code: "if num % 2 == 0:",
    type: "ifElseChange",
  },
  {
    id: 6,
    depth: 3,
    expr: "False",
    code: "if num % 2 == 0:",
    type: "ifElseChange",
  },
  {
    id: 5,
    depth: 2,
    condition: {
      target: "num",
      cur: "4",
      start: "1",
      end: "10",
      step: "1",
    },
    highlights: ["cur"],
    code: "for num in numbers:",
    type: "for",
  },
  {
    depth: 3,
    conditions: [
      {
        id: 6,
        expr: "num % 2 == 0",
        type: "if",
        code: "if num % 2 == 0:",
      },
    ],
    code: "if num % 2 == 0:",
    type: "ifElseDefine",
  },
  {
    id: 6,
    depth: 3,
    expr: "num % 2 == 0",
    code: "if num % 2 == 0:",
    type: "ifElseChange",
  },
  {
    id: 6,
    depth: 3,
    expr: "4 % 2 == 0",
    code: "if num % 2 == 0:",
    type: "ifElseChange",
  },
  {
    id: 6,
    depth: 3,
    expr: "0 == 0",
    code: "if num % 2 == 0:",
    type: "ifElseChange",
  },
  {
    id: 6,
    depth: 3,
    expr: "True",
    code: "if num % 2 == 0:",
    type: "ifElseChange",
  },
  {
    id: 7,
    depth: 4,
    expr: "num",
    code: "even_numbers.append(num);",
    type: "variable",
  },
  {
    id: 7,
    depth: 4,
    expr: "4",
    code: "even_numbers.append(num);",
    type: "variable",
  },
  {
    variable: {
      id: 7,
      expr: "4",
      name: "even_numbers",
      code: "even_numbers.append(num);",
      type: "variable",
      idx: null,
    },
    type: "append",
    callStackName: "get_even_numbers",
  },
  {
    id: 5,
    depth: 2,
    condition: {
      target: "num",
      cur: "5",
      start: "1",
      end: "10",
      step: "1",
    },
    highlights: ["cur"],
    code: "for num in numbers:",
    type: "for",
  },
  {
    depth: 3,
    conditions: [
      {
        id: 6,
        expr: "num % 2 == 0",
        type: "if",
        code: "if num % 2 == 0:",
      },
    ],
    code: "if num % 2 == 0:",
    type: "ifElseDefine",
  },
  {
    id: 6,
    depth: 3,
    expr: "num % 2 == 0",
    code: "if num % 2 == 0:",
    type: "ifElseChange",
  },
  {
    id: 6,
    depth: 3,
    expr: "5 % 2 == 0",
    code: "if num % 2 == 0:",
    type: "ifElseChange",
  },
  {
    id: 6,
    depth: 3,
    expr: "1 == 0",
    code: "if num % 2 == 0:",
    type: "ifElseChange",
  },
  {
    id: 6,
    depth: 3,
    expr: "False",
    code: "if num % 2 == 0:",
    type: "ifElseChange",
  },
  {
    id: 5,
    depth: 2,
    condition: {
      target: "num",
      cur: "6",
      start: "1",
      end: "10",
      step: "1",
    },
    highlights: ["cur"],
    code: "for num in numbers:",
    type: "for",
  },
  {
    depth: 3,
    conditions: [
      {
        id: 6,
        expr: "num % 2 == 0",
        type: "if",
        code: "if num % 2 == 0:",
      },
    ],
    code: "if num % 2 == 0:",
    type: "ifElseDefine",
  },
  {
    id: 6,
    depth: 3,
    expr: "num % 2 == 0",
    code: "if num % 2 == 0:",
    type: "ifElseChange",
  },
  {
    id: 6,
    depth: 3,
    expr: "6 % 2 == 0",
    code: "if num % 2 == 0:",
    type: "ifElseChange",
  },
  {
    id: 6,
    depth: 3,
    expr: "0 == 0",
    code: "if num % 2 == 0:",
    type: "ifElseChange",
  },
  {
    id: 6,
    depth: 3,
    expr: "True",
    code: "if num % 2 == 0:",
    type: "ifElseChange",
  },
  {
    id: 7,
    depth: 4,
    expr: "num",
    code: "even_numbers.append(num);",
    type: "variable",
  },
  {
    id: 7,
    depth: 4,
    expr: "6",
    code: "even_numbers.append(num);",
    type: "variable",
  },
  {
    variable: {
      id: 7,
      expr: "6",
      name: "even_numbers",
      code: "even_numbers.append(num);",
      type: "variable",
      idx: null,
    },
    type: "append",
    callStackName: "get_even_numbers",
  },
  {
    id: 5,
    depth: 2,
    condition: {
      target: "num",
      cur: "7",
      start: "1",
      end: "10",
      step: "1",
    },
    highlights: ["cur"],
    code: "for num in numbers:",
    type: "for",
  },
  {
    depth: 3,
    conditions: [
      {
        id: 6,
        expr: "num % 2 == 0",
        type: "if",
        code: "if num % 2 == 0:",
      },
    ],
    code: "if num % 2 == 0:",
    type: "ifElseDefine",
  },
  {
    id: 6,
    depth: 3,
    expr: "num % 2 == 0",
    code: "if num % 2 == 0:",
    type: "ifElseChange",
  },
  {
    id: 6,
    depth: 3,
    expr: "7 % 2 == 0",
    code: "if num % 2 == 0:",
    type: "ifElseChange",
  },
  {
    id: 6,
    depth: 3,
    expr: "1 == 0",
    code: "if num % 2 == 0:",
    type: "ifElseChange",
  },
  {
    id: 6,
    depth: 3,
    expr: "False",
    code: "if num % 2 == 0:",
    type: "ifElseChange",
  },
  {
    id: 5,
    depth: 2,
    condition: {
      target: "num",
      cur: "8",
      start: "1",
      end: "10",
      step: "1",
    },
    highlights: ["cur"],
    code: "for num in numbers:",
    type: "for",
  },
  {
    depth: 3,
    conditions: [
      {
        id: 6,
        expr: "num % 2 == 0",
        type: "if",
        code: "if num % 2 == 0:",
      },
    ],
    code: "if num % 2 == 0:",
    type: "ifElseDefine",
  },
  {
    id: 6,
    depth: 3,
    expr: "num % 2 == 0",
    code: "if num % 2 == 0:",
    type: "ifElseChange",
  },
  {
    id: 6,
    depth: 3,
    expr: "8 % 2 == 0",
    code: "if num % 2 == 0:",
    type: "ifElseChange",
  },
  {
    id: 6,
    depth: 3,
    expr: "0 == 0",
    code: "if num % 2 == 0:",
    type: "ifElseChange",
  },
  {
    id: 6,
    depth: 3,
    expr: "True",
    code: "if num % 2 == 0:",
    type: "ifElseChange",
  },
  {
    id: 7,
    depth: 4,
    expr: "num",
    code: "even_numbers.append(num);",
    type: "variable",
  },
  {
    id: 7,
    depth: 4,
    expr: "8",
    code: "even_numbers.append(num);",
    type: "variable",
  },
  {
    variable: {
      id: 7,
      expr: "8",
      name: "even_numbers",
      code: "even_numbers.append(num);",
      type: "variable",
      idx: null,
    },
    type: "append",
    callStackName: "get_even_numbers",
  },
  {
    id: 5,
    depth: 2,
    condition: {
      target: "num",
      cur: "9",
      start: "1",
      end: "10",
      step: "1",
    },
    highlights: ["cur"],
    code: "for num in numbers:",
    type: "for",
  },
  {
    depth: 3,
    conditions: [
      {
        id: 6,
        expr: "num % 2 == 0",
        type: "if",
        code: "if num % 2 == 0:",
      },
    ],
    code: "if num % 2 == 0:",
    type: "ifElseDefine",
  },
  {
    id: 6,
    depth: 3,
    expr: "num % 2 == 0",
    code: "if num % 2 == 0:",
    type: "ifElseChange",
  },
  {
    id: 6,
    depth: 3,
    expr: "9 % 2 == 0",
    code: "if num % 2 == 0:",
    type: "ifElseChange",
  },
  {
    id: 6,
    depth: 3,
    expr: "1 == 0",
    code: "if num % 2 == 0:",
    type: "ifElseChange",
  },
  {
    id: 6,
    depth: 3,
    expr: "False",
    code: "if num % 2 == 0:",
    type: "ifElseChange",
  },
  {
    id: 5,
    depth: 2,
    condition: {
      target: "num",
      cur: "10",
      start: "1",
      end: "10",
      step: "1",
    },
    highlights: ["cur"],
    code: "for num in numbers:",
    type: "for",
  },
  {
    depth: 3,
    conditions: [
      {
        id: 6,
        expr: "num % 2 == 0",
        type: "if",
        code: "if num % 2 == 0:",
      },
    ],
    code: "if num % 2 == 0:",
    type: "ifElseDefine",
  },
  {
    id: 6,
    depth: 3,
    expr: "num % 2 == 0",
    code: "if num % 2 == 0:",
    type: "ifElseChange",
  },
  {
    id: 6,
    depth: 3,
    expr: "10 % 2 == 0",
    code: "if num % 2 == 0:",
    type: "ifElseChange",
  },
  {
    id: 6,
    depth: 3,
    expr: "0 == 0",
    code: "if num % 2 == 0:",
    type: "ifElseChange",
  },
  {
    id: 6,
    depth: 3,
    expr: "True",
    code: "if num % 2 == 0:",
    type: "ifElseChange",
  },
  {
    id: 7,
    depth: 4,
    expr: "num",
    code: "even_numbers.append(num);",
    type: "variable",
  },
  {
    id: 7,
    depth: 4,
    expr: "10",
    code: "even_numbers.append(num);",
    type: "variable",
  },
  {
    variable: {
      id: 7,
      expr: "10",
      name: "even_numbers",
      code: "even_numbers.append(num);",
      type: "variable",
      idx: null,
    },
    type: "append",
    callStackName: "get_even_numbers",
  },
  {
    id: 9,
    depth: 2,
    returnExpr: "even_numbers",
    code: "return even_numbers",
    type: "return",
  },
  {
    id: 9,
    depth: 2,
    returnExpr: "[2, 4, 6, 8, 10]",
    code: "return even_numbers",
    type: "return",
  },
  {
    id: 13,
    depth: 1,
    returnExpr: "[2, 4, 6, 8, 10]",
    returnArgName: "even_numbers",
    code: "even_numbers = get_even_numbers(numbers)",
    delFuncName: "get_even_numbers",
    type: "endUserFunc",
  },
  {
    variables: [
      {
        id: 13,
        expr: "[2, 4, 6, 8, 10]",
        name: "even_numbers",
        code: "even_numbers = get_even_numbers(numbers)",
        type: "list",
        idx: null,
      },
    ],
    callStackName: "main",
    type: "assign",
  },
  {
    id: 14,
    depth: 1,
    expr: "even_numbers",
    highlights: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11],
    console: null,
    code: "print(even_numbers) # [2, 4, 6, 8, 10]",
    type: "print",
  },
  {
    id: 14,
    depth: 1,
    expr: "[2, 4, 6, 8, 10]",
    highlights: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15],
    console: "[2, 4, 6, 8, 10]\n",
    code: "print(even_numbers) # [2, 4, 6, 8, 10]",
    type: "print",
  },
];

export default testResponseBody;
